{"version":3,"sources":["logo.png","components/Header.jsx","components/Picture.jsx","components/PictureList.jsx","App.js","reportWebVitals.js","index.js"],"names":["logo","searchInput","setImgSearch","Logo","onClick","location","reload","src","SearchBox","ref","onChange","e","val","currentTarget","value","placeholder","Header","Styled","header","h1","input","data","webformatURL","alt","tags","id","url","a","document","createElement","setAttribute","click","remove","imgClick","largeImageURL","Picture","article","list","searchValue","loadding","setLoadding","map","idx","search","replaceAll","Loadding","icon","faSpinner","size","spin","PictureList","section","div","App","useRef","useState","$imgSearch","$setImgSearch","$imgList","$setImgList","$listPage","$setListPage","$option","scrollDown","all","body","scrollHeight","querySelector","offsetHeight","window","scrollY","prev","useEffect","addEventListener","fetch","then","response","json","responseData","lastData","current","concat","hits","removeEventListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.408e9dc8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.5285a77c.png\";","/* eslint-disable */\r\nimport Styled from 'styled-components';\r\n\r\nexport default ({logo, searchInput, setImgSearch}) => {\r\n    const logoClick = () => {\r\n        location.reload();\r\n    }\r\n\r\n    const imgSearch = (e) => {\r\n      let val = e.currentTarget.value;\r\n      setImgSearch(val);\r\n    }\r\n\r\n    return (\r\n      <Header>\r\n        <Logo onClick={logoClick}>\r\n          <img src={logo} />\r\n        </Logo>\r\n        <SearchBox \r\n          ref={searchInput}\r\n          onChange={imgSearch}\r\n          placeholder=\"검색어를 입력하세요.\" \r\n        />\r\n      </Header>\r\n    )\r\n}\r\n\r\nconst Header = Styled.header`\r\n    height: 134px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-flow: column;\r\n`;\r\nconst Logo = Styled.h1`\r\n    width: 200px;\r\n    margin-bottom: 10px;\r\n    cursor: pointer;\r\n    img {\r\n        width: 100%;\r\n    }\r\n`\r\nconst SearchBox = Styled.input`\r\n    width: 90%;\r\n    height: 30px;\r\n    border: 1px solid #aaaaaa50;\r\n    border-radius: 4px;\r\n    padding: 0 6px;\r\n    outline: 0;\r\n    \r\n    &:focus {\r\n\r\n    }\r\n`;","/* eslint-disable import/no-anonymous-default-export */\r\nimport React, { createElement } from 'react';\r\nimport Styled from 'styled-components';\r\n\r\nexport default ({data}) => {\r\n\r\n    const imgClick = (id, url) => {\r\n        let a = document.createElement('a');\r\n            a.setAttribute('target', '_blank');\r\n            a.setAttribute('download', id);\r\n            a.setAttribute('href', url);\r\n            a.click();\r\n            a.remove();\r\n    }\r\n\r\n    return (\r\n        <Picture>\r\n            <img\r\n                src = {data.webformatURL} \r\n                alt = {data.tags}\r\n                onClick = {() => imgClick(data.id, data.largeImageURL)}\r\n            />\r\n        </Picture>\r\n    )\r\n}\r\n\r\nconst Picture = Styled.article`\r\n    display: inline-block;\r\n    border: 1px solid #00000020;\r\n    margin: 0;\r\n    margin-bottom: 10px;\r\n    padding: 6px;\r\n    box-shadow: 2px 2px 5px #00000040;\r\n\r\n    &:hover {\r\n        background-color: #fd8726;\r\n    }\r\n    img {\r\n        width: 100%;\r\n        display: block;\r\n        cursor: pointer;\r\n        background-color: #fff;\r\n    }\r\n`;","/* eslint-disable import/no-anonymous-default-export */\r\nimport Styled from 'styled-components';\r\nimport Picture from './Picture';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default ({list, searchValue, loadding, setLoadding}) => {\r\n    return (\r\n        <PictureList>\r\n            {list.map((data, idx) => {\r\n                if(data.tags.search(searchValue.replaceAll(' ', '')) > -1){\r\n                    return <Picture data={data} key={idx} />\r\n                }\r\n            })}\r\n\r\n            {\r\n                loadding ? \r\n                <Loadding><FontAwesomeIcon icon={faSpinner} size=\"2x\" spin /></Loadding> : \r\n                ''\r\n            }\r\n        </PictureList>\r\n    )\r\n}\r\n\r\nconst PictureList = Styled.section`\r\n    width: 100%;\r\n    column-width: 20rem;\r\n    column-gap: 10px;\r\n    text-align: center;\r\n    padding: 10px;\r\n`;\r\n\r\nconst Loadding = Styled.div`\r\n    width: 100%;\r\n    height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #666;\r\n    margin-top: 30px;\r\n\r\n    span {\r\n        width: 10px;\r\n        height: 10px;\r\n        margin: 0 3px;\r\n        border: 1px solid #aaa;\r\n        border-radius: 50%;\r\n        display: block;\r\n        transition: .3s;\r\n        animation: loaddingAni infinite 3s;\r\n    }\r\n    @keyframes loaddingAni {\r\n        0%  {\r\n            span {background-color: none;}\r\n            span:nth-of-type(1) {\r\n                background-color: #aaa;\r\n            }\r\n        }\r\n        33.33%  {\r\n            span {background-color: none;}\r\n            span:nth-of-type(2) {\r\n                background-color: #aaa;\r\n            }\r\n        }\r\n        66.66%  {\r\n            span {background-color: none;}\r\n            span:nth-of-type(3) {\r\n                background-color: #aaa;\r\n            }\r\n        }\r\n        100%  {\r\n            span {background-color: none;}\r\n            span:nth-of-type(1) {\r\n                background-color: #aaa;\r\n            }\r\n        }\r\n    }\r\n`;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, {useState, useEffect, useMemo, useRef} from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n// import {faSearch} from '@fortawesome/free-regular-svg-icons';\nimport Header from './components/Header';\nimport PictureList from './components/PictureList';\nimport { createEvent } from '@testing-library/dom';\n\nfunction App() {\n\n  const searchInput = useRef(null);\n  const [$imgSearch, $setImgSearch] = useState('');\n  const [$imgList, $setImgList] = useState([]);\n  const [$listPage, $setListPage] = useState(1);\n  const [loadding, setLoadding] = useState(false);\n  const $url = 'https://pixabay.com/api/?';\n  const $option = {\n    key: 'key=16682621-dc6a4ac72962315d360d16da9',\n    safe: '&editors_choice=true',\n    count: '&per_page=20',\n    page: '&page='\n  };\n  \n  const scrollDown = (e) => {\n    let bodyHeight = document.body.scrollHeight;\n    let rootHeight = document.body.querySelector('#root').offsetHeight\n    let all = bodyHeight - rootHeight;\n    let now = window.scrollY;\n    \n    if(now >= all) {\n      setLoadding(true);\n      $setListPage((prev) => prev += 1)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', scrollDown);\n    \n    fetch($url + $option.key + $option.safe + $option.count + $option.page + $listPage)\n      .then((response) => response.json())\n      .then((responseData) => {\n        $setImgList((lastData) => {\n          $setImgSearch('');\n          searchInput.current.value = '';\n          setLoadding(false);\n          return lastData.concat(responseData.hits);\n        });\n      });\n      \n    return () => {\n      window.removeEventListener('scroll', scrollDown);\n    }\n  }, [$listPage]);\n\n  return (\n    <div id=\"App\">\n      <Header \n        logo = {logo}\n        searchInput = {searchInput}\n        setImgSearch = {$setImgSearch}\n      />\n      <PictureList \n        list = {$imgList}\n        searchInput = {searchInput}\n        searchValue = {$imgSearch}\n        loadding = {loadding}\n        setLoadding = {setLoadding}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}